{"version":3,"sources":["component/post.jsx","context/postContext.jsx","component/nav.jsx","context/addPostsContext.jsx","component/addPost.jsx","component/details.jsx","component/viewPosts.jsx","App.js","serviceWorker.js","index.js"],"names":["Post","props","className","name","src","imgSrc","alt","PostContext","createContext","PostProvider","Props","useState","id","type","item","setItem","Provider","value","children","Nav","to","AddPostContext","AddPostsProvider","Posts","addPosts","AddPost","useContext","posts","setName","setType","setImgSrc","setId","onSubmit","e","preventDefault","length","console","log","prevPosts","onChange","target","map","Item","key","Details","location","state","ViewPosts","pathname","Home","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd2ad34f.chunk.js","sourcesContent":["import React, { Component, useContext } from 'react';\r\n\r\n\r\nfunction Post(props) {\r\n\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <h2 className=\"postH2\">{props.name}</h2>\r\n            <img src={\"/images/\" + props.imgSrc} alt={props.name} />\r\n        </div>);\r\n}\r\n\r\nexport default Post;","import React, { useState, createContext } from 'react';\r\nimport Post from '../component/post';\r\n\r\n\r\nexport const PostContext = createContext();\r\n\r\nexport const PostProvider = (Props) => {\r\n\r\n    const [item, setItem] = useState([\r\n        {\r\n            id: 1, type: \"Car\", imgSrc: \"img-9.jpg\"\r\n        }, {\r\n\r\n            id: 2, type: \"Flower\", imgSrc: \"img-1.jpg\"\r\n        },\r\n        {\r\n\r\n            id: 3, type: \"Sea\", imgSrc: \"img-5.jpg\"\r\n        }\r\n\r\n\r\n\r\n\r\n    ]);\r\n\r\n    \r\n   \r\n\r\n    return (<PostContext.Provider value={[item, setItem]} >{Props.children}</PostContext.Provider>);\r\n}\r\n\r\n\r\n","import React, {useContext } from 'react';\r\nimport {PostContext} from '../context/postContext';\r\nimport '../App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n\r\n    const navStyle = {\r\n        color: 'white'\r\n    };\r\n    return (\r\n        <nav>\r\n            <h2>Nav</h2>\r\n            <ul className=\"nav-links\">\r\n                <Link to=\"/AddPost\">\r\n                    <li>Add Post</li>\r\n                </Link>\r\n                <Link to=\"/ViewPosts\">\r\n                    <li>View Posts</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, { createContext, useContext, useState } from 'react';\r\n\r\nexport const AddPostContext = createContext();\r\n\r\nexport const AddPostsProvider = (props) => {\r\n    const [Posts, addPosts] = useState([\r\n        { id: '1', name: 'car', type: 'car', imgSrc: 'img-9.jpg' },\r\n    ]\r\n    );\r\n    return (\r\n        <AddPostContext.Provider value={[Posts, addPosts]}>\r\n            {props.children}\r\n        </AddPostContext.Provider>\r\n    );\r\n};","import React, { Component, useState, useContext } from 'react';\r\nimport { PostContext } from '../context/postContext';\r\nimport '../App.css';\r\nimport { AddPostContext } from '../context/addPostsContext';\r\n\r\nfunction AddPost() {\r\n\r\n    const [posts, addPosts] = useContext(AddPostContext);\r\n    const [item, setItem] = useContext(PostContext);\r\n    const [name, setName] = useState('');\r\n    const [type, setType] = useState('');\r\n    const [imgSrc, setImgSrc] = useState('');\r\n    const [id, setId] = useState('');\r\n\r\n\r\n    const updateName = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n    const updatetype = (e) => {\r\n        setType(e.target.value);\r\n    };\r\n    const updateImgSrc = (e) => {\r\n        setImgSrc(e.target.value);\r\n    };\r\n    const updateId = (e) => {\r\n        setId(posts.length + 1);\r\n        console.log(id);\r\n\r\n    };\r\n    const AddPosts = (e) => {\r\n        e.preventDefault();\r\n        updateId();\r\n        addPosts(prevPosts => [...prevPosts, { id: id, name: name, type: type, imgSrc: imgSrc }]);\r\n\r\n    };\r\n    return (\r\n\r\n        <div>\r\n\r\n            <h1>Add Post Page </h1>\r\n            <div className=\"tableDiv\">\r\n\r\n                <form onSubmit={setId, AddPosts}>\r\n                    <label>Enter the name of product </label>\r\n                    <input type=\"textbox\" value={name} onChange={updateName} />\r\n                    <br />\r\n                    <label>Select the type of this product</label>\r\n                    <select value={type} onChange={updatetype}>\r\n                        {item.map((Item) => (<option key={Item.id} >{Item.type}</option>))}\r\n\r\n                    </select>\r\n                    <br />\r\n                    <label>Image</label>\r\n                    <select value={imgSrc} onChange={updateImgSrc}>\r\n                        {item.map((Item) => (<option key={Item.id} >{Item.imgSrc}</option>))}\r\n                    </select>\r\n                    <br />\r\n                    <button>Submit</button>\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default AddPost;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nfunction Details(props) {\r\n\r\n    console.log(props);\r\n\r\n    return (\r\n        <div>\r\n            <img src={\"/images/\" + props.location.state.imgSrc} />\r\n            <h3>Name : {props.location.state.name} </h3>\r\n            <h3>Type : {props.location.state.type} </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Details;","import React, { Component, useContext, useState } from 'react';\r\nimport PostContext from '../context/postContext';\r\nimport Post from './post';\r\nimport { Link } from 'react-router-dom';\r\nimport { AddPostContext } from '../context/addPostsContext';\r\nimport Details from './details';\r\n\r\nfunction ViewPosts() {\r\n    const [posts] = useContext(AddPostContext);\r\n\r\n    return (\r\n\r\n        <div className=\"bar\" >\r\n            {posts.map(Posts =>\r\n\r\n                <Link to={{\r\n                    pathname: \"/Details\", state: {\r\n                        key: Posts.id, name: Posts.name,\r\n                        type: Posts.type, imgSrc: Posts.imgSrc\r\n                    }\r\n                }} >\r\n                    <Post key={Posts.id} name={Posts.name} type={Posts.type} imgSrc={Posts.imgSrc} />\r\n                </Link>\r\n\r\n            )}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ViewPosts;","import React from 'react';\nimport './App.css';\nimport Nav from './component/nav';\nimport AddPost from './component/addPost';\nimport ViewPosts from './component/viewPosts';\nimport Post from './component/post';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { PostProvider } from './context/postContext';\nimport { AddPostsProvider } from './context/addPostsContext';\nimport Details from './component/details';\n\nfunction App() {\n  return (\n\n    <PostProvider>\n      <AddPostsProvider>\n        <Router >\n          <div className=\"App\">\n            <Nav />\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/AddPost\" component={AddPost} />\n              <Route path=\"/ViewPosts\" component={ViewPosts} />\n              <Route path=\"/Details\" component={Details} />\n            </Switch>\n          </div>\n        </Router>\n      </AddPostsProvider>\n    </PostProvider>\n\n  );\n}\nconst Home = () => {\n  return (<div>\n    <h1>Home</h1>\n  </div>);\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}